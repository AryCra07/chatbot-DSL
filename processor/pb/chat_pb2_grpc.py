# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class GreetStub(object):
    """Greet Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHelloService = channel.unary_unary(
                '/pb.Greet/SayHelloService',
                request_serializer=chat__pb2.HelloRequest.SerializeToString,
                response_deserializer=chat__pb2.HelloResponse.FromString,
                )


class GreetServicer(object):
    """Greet Service
    """

    def SayHelloService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreetServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHelloService': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHelloService,
                    request_deserializer=chat__pb2.HelloRequest.FromString,
                    response_serializer=chat__pb2.HelloResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Greet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greet(object):
    """Greet Service
    """

    @staticmethod
    def SayHelloService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Greet/SayHelloService',
            chat__pb2.HelloRequest.SerializeToString,
            chat__pb2.HelloResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ChatStub(object):
    """Chat Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnswerService = channel.unary_unary(
                '/pb.Chat/AnswerService',
                request_serializer=chat__pb2.ChatRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatResponse.FromString,
                )


class ChatServicer(object):
    """Chat Service
    """

    def AnswerService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnswerService': grpc.unary_unary_rpc_method_handler(
                    servicer.AnswerService,
                    request_deserializer=chat__pb2.ChatRequest.FromString,
                    response_serializer=chat__pb2.ChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chat(object):
    """Chat Service
    """

    @staticmethod
    def AnswerService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Chat/AnswerService',
            chat__pb2.ChatRequest.SerializeToString,
            chat__pb2.ChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TimerStub(object):
    """Timer Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TimerService = channel.unary_unary(
                '/pb.Timer/TimerService',
                request_serializer=chat__pb2.TimerRequest.SerializeToString,
                response_deserializer=chat__pb2.TimerResponse.FromString,
                )


class TimerServicer(object):
    """Timer Service
    """

    def TimerService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TimerService': grpc.unary_unary_rpc_method_handler(
                    servicer.TimerService,
                    request_deserializer=chat__pb2.TimerRequest.FromString,
                    response_serializer=chat__pb2.TimerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Timer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Timer(object):
    """Timer Service
    """

    @staticmethod
    def TimerService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Timer/TimerService',
            chat__pb2.TimerRequest.SerializeToString,
            chat__pb2.TimerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
