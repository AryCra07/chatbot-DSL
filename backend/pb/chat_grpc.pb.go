// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pb/chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	AnswerService(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ChatResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) AnswerService(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/pb.Chat/AnswerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	AnswerService(context.Context, *UserRequest) (*ChatResponse, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) AnswerService(context.Context, *UserRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerService not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_AnswerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AnswerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chat/AnswerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AnswerService(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnswerService",
			Handler:    _Chat_AnswerService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/chat.proto",
}

// GreetClient is the client API for Greet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetClient interface {
	SayHelloService(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type greetClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetClient(cc grpc.ClientConnInterface) GreetClient {
	return &greetClient{cc}
}

func (c *greetClient) SayHelloService(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/pb.Greet/SayHelloService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetServer is the server API for Greet service.
// All implementations must embed UnimplementedGreetServer
// for forward compatibility
type GreetServer interface {
	SayHelloService(context.Context, *UserRequest) (*HelloResponse, error)
	mustEmbedUnimplementedGreetServer()
}

// UnimplementedGreetServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServer struct {
}

func (UnimplementedGreetServer) SayHelloService(context.Context, *UserRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloService not implemented")
}
func (UnimplementedGreetServer) mustEmbedUnimplementedGreetServer() {}

// UnsafeGreetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServer will
// result in compilation errors.
type UnsafeGreetServer interface {
	mustEmbedUnimplementedGreetServer()
}

func RegisterGreetServer(s grpc.ServiceRegistrar, srv GreetServer) {
	s.RegisterService(&Greet_ServiceDesc, srv)
}

func _Greet_SayHelloService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServer).SayHelloService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Greet/SayHelloService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServer).SayHelloService(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greet_ServiceDesc is the grpc.ServiceDesc for Greet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Greet",
	HandlerType: (*GreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloService",
			Handler:    _Greet_SayHelloService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/chat.proto",
}

// TimeoutClient is the client API for Timeout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeoutClient interface {
	TimeoutService(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
}

type timeoutClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeoutClient(cc grpc.ClientConnInterface) TimeoutClient {
	return &timeoutClient{cc}
}

func (c *timeoutClient) TimeoutService(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := c.cc.Invoke(ctx, "/pb.Timeout/TimeoutService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeoutServer is the server API for Timeout service.
// All implementations must embed UnimplementedTimeoutServer
// for forward compatibility
type TimeoutServer interface {
	TimeoutService(context.Context, *UserRequest) (*TimeoutResponse, error)
	mustEmbedUnimplementedTimeoutServer()
}

// UnimplementedTimeoutServer must be embedded to have forward compatible implementations.
type UnimplementedTimeoutServer struct {
}

func (UnimplementedTimeoutServer) TimeoutService(context.Context, *UserRequest) (*TimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutService not implemented")
}
func (UnimplementedTimeoutServer) mustEmbedUnimplementedTimeoutServer() {}

// UnsafeTimeoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeoutServer will
// result in compilation errors.
type UnsafeTimeoutServer interface {
	mustEmbedUnimplementedTimeoutServer()
}

func RegisterTimeoutServer(s grpc.ServiceRegistrar, srv TimeoutServer) {
	s.RegisterService(&Timeout_ServiceDesc, srv)
}

func _Timeout_TimeoutService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeoutServer).TimeoutService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Timeout/TimeoutService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeoutServer).TimeoutService(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timeout_ServiceDesc is the grpc.ServiceDesc for Timeout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timeout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Timeout",
	HandlerType: (*TimeoutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TimeoutService",
			Handler:    _Timeout_TimeoutService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/chat.proto",
}
